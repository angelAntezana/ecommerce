openapi: 3.0.3
info:
  title: OpenAPI 3.0
  description: |-
    This is a sample based on the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:8080/api/v3
tags:
  - name: customer
    description: Operations about customer
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
paths:
  /customer:
    post:
      tags:
        - customer
      summary: Create customer
      description: This can only be done by the logged in customer.
      operationId: createCustomer
      requestBody:
        description: Created customer object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequestCustomer'
          application/xml:
            schema:
              $ref: '#/components/schemas/PostRequestCustomer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostRequestCustomer'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponseCustomer'
            application/xml:
              schema:
                $ref: '#/components/schemas/PostResponseCustomer'
        '400':
          description: Invalid id supplied
        '500':
          description: Server error
  /customer/{id}:
    get:
      tags:
        - customer
      summary: Get customer by id
      description: ''
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          description: 'The name that needs to be fetched. Use customer1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid id supplied
        '404':
          description: Customer not found
    put:
      tags:
        - customer
      summary: Update customer
      description: This can only be done by the logged in customer.
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent customer in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/xml:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '202':
          description: successful operation
        '400':
          description: Invalid id supplied
        '404':
          description: Customer not found

    delete:
        tags:
          - customer
        summary: Delete customer
        description: This can only be done by the logged in customer.
        operationId: deleteCustomer
        parameters:
          - name: id
            in: path
            description: The id that needs to be deleted
            required: true
            schema:
              type: string
        responses:
          '202':
            description: successful operation
          '400':
            description: Invalid id supplied
          '404':
            description: Customer not found
          '500':
            description: Server error 
  /customer/:
    get:
      tags:
        - customer
      summary: Get customers
      description: ''
      operationId: getCustomers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Customer'
            application/xml:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid id supplied
        '404':
          description: Customer not found
        '500':
          description: Server error
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          example: the id
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        address:
          type: string
          example: 'Calle Alcalá' 
        city:
          type: string
          example: "Madrid"
    PostRequestCustomer:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
        address:
          type: string
          example: 'Calle Alcalá' 
        city:
          type: string
          example: "Madrid"
    PostResponseCustomer:
      type: object
      properties:
        id:
          type: string
          example: the id
  requestBodies:
    CustomerArray:
      description: List of customer object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Customer'